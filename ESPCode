// ESP32 Dual Zone Thermostat with Auto Mode, DS18B20, Nextion GUI

#include <HardwareSerial.h>
#include <EasyNextionLibrary.h>
#include <OneWire.h>
#include <DallasTemperature.h>

// RS485 UART Settings
#define RS485_TX 17
#define RS485_RX 16

HardwareSerial RS485Serial(2);

// Nextion Serial
#define NEXTION_TX 33
#define NEXTION_RX 32
HardwareSerial nextionSerial(1);
EasyNex myNex(nextionSerial);

// DS18B20 Temp Sensor
#define ONE_WIRE_BUS 4
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

// Zone variables
float currentTempZone1 = 0.0;
float currentTempZone2 = 0.0; // Will mirror Zone 1 sensor

uint8_t zone1Setpoint = 70;
uint8_t zone2Setpoint = 72;

uint8_t zone1Mode = 0x03; // Cool
uint8_t zone2Mode = 0x03; // Cool

uint8_t zone1FanModeHigh = 0;
uint8_t zone2FanModeHigh = 0;

// Auto Mode Variables
bool autoModeEnabled = false;
uint8_t heatSetpoint = 68;
uint8_t coolSetpoint = 74;
bool systemHeating = false;
bool systemCooling = false;

unsigned long lastTempUpdate = 0;
const unsigned long tempInterval = 2000;

void setup() {
  Serial.begin(115200);
  RS485Serial.begin(9600, SERIAL_8N1, RS485_RX, RS485_TX);
  nextionSerial.begin(9600, SERIAL_8N1, NEXTION_RX, NEXTION_TX);
  myNex.begin(9600);

  sensors.begin();
}

void loop() {
  myNex.NextionListen();

  if (millis() - lastTempUpdate > tempInterval) {
    sensors.requestTemperatures();
    float ambientTempC = sensors.getTempCByIndex(0);
    Serial.print("Ambient Temp (C): ");
    Serial.println(ambientTempC);

    if (ambientTempC != DEVICE_DISCONNECTED_C) {
      currentTempZone1 = ambientTempC * 9.0 / 5.0 + 32.0;
      currentTempZone2 = currentTempZone1; // Mirror Zone 1

      myNex.writeStr("tZone1Temp.txt", String(currentTempZone1, 1) + " F");
      myNex.writeStr("tZone2Temp.txt", String(currentTempZone2, 1) + " F");
    } else {
      myNex.writeStr("tZone1Temp.txt", "Error");
      myNex.writeStr("tZone2Temp.txt", "Error");
      Serial.println("Sensor disconnected!");
    }

    myNex.writeStr("tZone1Set.txt", String(zone1Setpoint));
    myNex.writeStr("tZone2Set.txt", String(zone2Setpoint));
    myNex.writeStr("tHeatSet.txt", String(heatSetpoint) + "F");
    myNex.writeStr("tCoolSet.txt", String(coolSetpoint) + "F");

    updateSystemStatus();

    if (autoModeEnabled) handleAutoMode();

    lastTempUpdate = millis();
  }
}

void handleAutoMode() {
  if (currentTempZone1 < heatSetpoint - 1 && !systemHeating) {
    zone1Mode = 0x02; // Heat
    zone2Mode = 0x00; // Off
    systemHeating = true;
    systemCooling = false;
    sendRS485Packet();
  } else if (currentTempZone1 > coolSetpoint + 1 && !systemCooling) {
    zone1Mode = 0x03; // Cool
    zone2Mode = 0x00; // Off
    systemCooling = true;
    systemHeating = false;
    sendRS485Packet();
  } else if (currentTempZone1 >= heatSetpoint && currentTempZone1 <= coolSetpoint) {
    if (systemHeating || systemCooling) {
      zone1Mode = 0x00; // Off
      zone2Mode = 0x00; // Off
      systemHeating = false;
      systemCooling = false;
      sendRS485Packet();
    }
  }
}

void sendRS485Packet() {
  uint8_t zone1Set = zone1Setpoint + 82;
  uint8_t zone2Set = zone2Setpoint + 82;

  uint8_t packet[] = {
    0xF6,
    zone1Set,
    zone1Mode,
    fanModeCode(1),
    zone2Set,
    zone2Mode,
    fanModeCode(2),
    0xFF
  };

  RS485Serial.write(packet, sizeof(packet));
  RS485Serial.flush();
}

uint8_t fanModeCode(uint8_t zone) {
  if (zone == 1) {
    switch (zone1FanModeHigh) {
      case 0: return 0xD9;
      case 1: return 0x33;
      case 2: return 0xD9;
    }
  } else if (zone == 2) {
    switch (zone2FanModeHigh) {
      case 0: return 0x99;
      case 1: return 0x33;
      case 2: return 0xB2;
    }
  }
  return 0x99;
}

// Button Handlers
void bAutoTogglePressed() {
  autoModeEnabled = !autoModeEnabled;
  if (autoModeEnabled) {
    myNex.writeStr("tAutoStatus.txt", "Auto Mode: ON");
    myNex.writeStr("bAutoToggle.txt", "Disable Auto Mode");
  } else {
    myNex.writeStr("tAutoStatus.txt", "Auto Mode: OFF");
    myNex.writeStr("bAutoToggle.txt", "Enable Auto Mode");
  }
}

void bHeatUpPressed() {
  if (heatSetpoint < coolSetpoint - 2) {
    heatSetpoint++;
    myNex.writeStr("tHeatSet.txt", String(heatSetpoint) + "F");
  }
}

void bHeatDownPressed() {
  if (heatSetpoint > 50) {
    heatSetpoint--;
    myNex.writeStr("tHeatSet.txt", String(heatSetpoint) + "F");
  }
}

void bCoolUpPressed() {
  if (coolSetpoint < 90) {
    coolSetpoint++;
    myNex.writeStr("tCoolSet.txt", String(coolSetpoint) + "F");
  }
}

void bCoolDownPressed() {
  if (coolSetpoint > heatSetpoint + 2) {
    coolSetpoint--;
    myNex.writeStr("tCoolSet.txt", String(coolSetpoint) + "F");
  }
}

void bHomePressed() {
  myNex.writeNum("page", 0);  // Go Home
}

void updateSystemStatus() {
  if (autoModeEnabled) {
    if (systemHeating) {
      myNex.writeStr("tSystemStatus.txt", "Auto: Heating");
    } else if (systemCooling) {
      myNex.writeStr("tSystemStatus.txt", "Auto: Cooling");
    } else {
      myNex.writeStr("tSystemStatus.txt", "Auto: Idle");
    }
  } else {
    if (zone1Mode == 0x02) {
      myNex.writeStr("tSystemStatus.txt", "Manual: Heating");
    } else if (zone1Mode == 0x03) {
      myNex.writeStr("tSystemStatus.txt", "Manual: Cooling");
    } else {
      myNex.writeStr("tSystemStatus.txt", "Manual: Off");
    }
  }
}

// Zone 1 Handlers
void bZone1TempUpPressed() {
  if (zone1Setpoint < 90) {
    zone1Setpoint++;
    myNex.writeStr("tZone1Set.txt", String(zone1Setpoint));
    sendRS485Packet();
  }
}

void bZone1TempDownPressed() {
  if (zone1Setpoint > 50) {
    zone1Setpoint--;
    myNex.writeStr("tZone1Set.txt", String(zone1Setpoint));
    sendRS485Packet();
  }
}

void bZone1CoolPressed() {
  zone1Mode = 0x03; // Cool
  updateSystemStatus();
  sendRS485Packet();
}

void bZone1HeatPressed() {
  zone1Mode = 0x02; // Heat
  updateSystemStatus();
  sendRS485Packet();
}

void bZone1OffPressed() {
  zone1Mode = 0x00; // Off
  updateSystemStatus();
  sendRS485Packet();
}

void bZone1FanAutoPressed() {
  zone1FanModeHigh = 0; // Auto (Low)
  sendRS485Packet();
}

void bZone1FanHighPressed() {
  zone1FanModeHigh = 1; // High
  sendRS485Packet();
}

void bZone1FanLowPressed() {
  zone1FanModeHigh = 2; // Low
  sendRS485Packet();
}

// Zone 2 Handlers
void bZone2TempUpPressed() {
  if (zone2Setpoint < 90) {
    zone2Setpoint++;
    myNex.writeStr("tZone2Set.txt", String(zone2Setpoint));
    sendRS485Packet();
  }
}

void bZone2TempDownPressed() {
  if (zone2Setpoint > 50) {
    zone2Setpoint--;
    myNex.writeStr("tZone2Set.txt", String(zone2Setpoint));
    sendRS485Packet();
  }
}

void bZone2CoolPressed() {
  zone2Mode = 0x03; // Cool
  sendRS485Packet();
}

void bZone2OffPressed() {
  zone2Mode = 0x00; // Off
  sendRS485Packet();
}

void bZone2FanAutoPressed() {
  zone2FanModeHigh = 0; // Auto (Low)
  sendRS485Packet();
}

void bZone2FanHighPressed() {
  zone2FanModeHigh = 1; // High
  sendRS485Packet();
}

void bZone2FanLowPressed() {
  zone2FanModeHigh = 2; // Low
  sendRS485Packet();
}

// ESP32 Dual Zone Thermostat with DS18B20, Multiple Pages, Nextion GUI

#include <HardwareSerial.h>
#include <EasyNextionLibrary.h>
#include <OneWire.h>
#include <DallasTemperature.h>

// RS485 UART Settings
#define RS485_TX 17    // ESP32 UART2 TX
#define RS485_RX 16    // ESP32 UART2 RX

HardwareSerial RS485Serial(2);

// Nextion Serial (UART1)
#define NEXTION_TX 33
#define NEXTION_RX 32
HardwareSerial nextionSerial(1);
EasyNex myNex(nextionSerial); // Create EasyNex object

// DS18B20 Temp Sensor (for Zone 1)
#define ONE_WIRE_BUS 25  // GPIO 25
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

// Zone variables
float currentTempZone1 = 0.0;
float currentTempZone2 = 72.0; // Simulated Zone 2

uint8_t zone1Setpoint = 70; // Default set temps
uint8_t zone2Setpoint = 72;

uint8_t zone1Mode = 0x03; // Cool by default
uint8_t zone2Mode = 0x03;

uint8_t zone1FanModeHigh = 0; // 0 = Auto, 1 = High, 2 = Low
uint8_t zone2FanModeHigh = 0;

unsigned long lastTempUpdate = 0;
const unsigned long tempInterval = 2000; // 2 seconds

void setup() {
  Serial.begin(115200);
  RS485Serial.begin(9600, SERIAL_8N1, RS485_RX, RS485_TX);

  nextionSerial.begin(9600, SERIAL_8N1, NEXTION_RX, NEXTION_TX);
  myNex.begin(9600);

  sensors.begin();
}

void loop() {
  myNex.NextionListen();

  if (millis() - lastTempUpdate > tempInterval) {
    sensors.requestTemperatures();
    float ambientTempC = sensors.getTempCByIndex(0);
    currentTempZone1 = ambientTempC * 9.0 / 5.0 + 32.0;

    if (ambientTempC != DEVICE_DISCONNECTED_C) {
      myNex.writeStr("tZone1Temp.txt", String(currentTempZone1, 1) + " F");
      myNex.writeStr("tZone2Temp.txt", String(currentTempZone2, 1) + " F");
    } else {
      myNex.writeStr("tZone1Temp.txt", "Error");
    }

    myNex.writeStr("tZone1Set.txt", String(zone1Setpoint));
    myNex.writeStr("tZone2Set.txt", String(zone2Setpoint));

    lastTempUpdate = millis();
  }
}

void sendRS485Packet() {
  uint8_t zone1Set = zone1Setpoint + 82;
  uint8_t zone2Set = zone2Setpoint + 82;

  uint8_t packet[] = {
    0xF6,
    zone1Set,
    zone1Mode,
    fanModeCode(1),
    zone2Set,
    zone2Mode,
    fanModeCode(2),
    0xFF
  };

  RS485Serial.write(packet, sizeof(packet));
  RS485Serial.flush();
}

uint8_t fanModeCode(uint8_t zone) {
  if (zone == 1) {
    switch (zone1FanModeHigh) {
      case 0: return 0xD9;
      case 1: return 0x33;
      case 2: return 0xD9;
    }
  } else if (zone == 2) {
    switch (zone2FanModeHigh) {
      case 0: return 0x99;
      case 1: return 0x33;
      case 2: return 0xB2;
    }
  }
  return 0x99;
}

// Example for handling a button press
void bZone1CoolPressed() {
  zone1Mode = 0x03;
  sendRS485Packet();
}

void bZone1HeatPressed() {
  zone1Mode = 0x02;
  sendRS485Packet();
}

void bZone1OffPressed() {
  zone1Mode = 0x00;
  sendRS485Packet();
}

void bZone1FanAutoPressed() { zone1FanModeHigh = 0; sendRS485Packet(); }
void bZone1FanHighPressed() { zone1FanModeHigh = 1; sendRS485Packet(); }
void bZone1FanLowPressed()  { zone1FanModeHigh = 2; sendRS485Packet(); }

void bZone2CoolPressed() { zone2Mode = 0x03; sendRS485Packet(); }
void bZone2OffPressed()  { zone2Mode = 0x00; sendRS485Packet(); }

void bZone2FanAutoPressed() { zone2FanModeHigh = 0; sendRS485Packet(); }
void bZone2FanHighPressed() { zone2FanModeHigh = 1; sendRS485Packet(); }
void bZone2FanLowPressed()  { zone2FanModeHigh = 2; sendRS485Packet(); }

void bZone1TempUpPressed() { zone1Setpoint++; sendRS485Packet(); }
void bZone1TempDownPressed() { zone1Setpoint--; sendRS485Packet(); }

void bZone2TempUpPressed() { zone2Setpoint++; sendRS485Packet(); }
void bZone2TempDownPressed() { zone2Setpoint--; sendRS485Packet(); }

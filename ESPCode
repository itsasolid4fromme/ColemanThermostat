// ESP32 Thermostat Controller with DS18B20 Room Temp Display

#include <HardwareSerial.h>
#include <EasyNextionLibrary.h>
#include <OneWire.h>
#include <DallasTemperature.h>

// RS485 UART Settings
#define RS485_TX 17    // ESP32 UART2 TX
#define RS485_RX 16    // ESP32 UART2 RX

// UART2 for RS485
HardwareSerial RS485Serial(2);

// Nextion Serial (UART1)
#define NEXTION_TX 33
#define NEXTION_RX 32
HardwareSerial nextionSerial(1);
EasyNex myNex(nextionSerial); // Create EasyNex object

// DS18B20 Temp Sensor
#define ONE_WIRE_BUS 25  // GPIO 25
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

// Variables to hold settings
uint8_t zone1Temp = 70; // Default set temp
uint8_t zone2Temp = 72;

uint8_t zone1Mode = 0x03; // Cool by default
uint8_t zone2Mode = 0x03;

uint8_t zone1FanModeHigh = 0; // 0 = Auto, 1 = High, 2 = Low
uint8_t zone2FanModeHigh = 0;

unsigned long lastTempUpdate = 0;
const unsigned long tempInterval = 2000; // Update every 2 seconds

void setup() {
  Serial.begin(115200);

  // Setup RS485
  RS485Serial.begin(9600, SERIAL_8N1, RS485_RX, RS485_TX);

  // Setup Nextion
  nextionSerial.begin(9600, SERIAL_8N1, NEXTION_RX, NEXTION_TX);
  myNex.begin(9600);

  // Setup DS18B20
  sensors.begin();
}

void loop() {
  myNex.NextionListen();

  // Update room temp every 2 seconds
  if (millis() - lastTempUpdate > tempInterval) {
    sensors.requestTemperatures();
    float ambientTempC = sensors.getTempCByIndex(0);
    float ambientTempF = ambientTempC * 9.0 / 5.0 + 32.0;

    if (ambientTempC != DEVICE_DISCONNECTED_C) {
      myNex.writeStr("tAmbient.txt", String(ambientTempF, 1) + " F");
    } else {
      myNex.writeStr("tAmbient.txt", "Error");
    }

    lastTempUpdate = millis();
  }
}

void sendRS485Packet() {
  uint8_t zone1Setpoint = zone1Temp + 82;
  uint8_t zone2Setpoint = zone2Temp + 82;

  uint8_t packet[] = {
    0xF6, // Start Byte (example)
    zone1Setpoint,
    zone1Mode,
    fanModeCode(1),
    zone2Setpoint,
    zone2Mode,
    fanModeCode(2),
    0xFF // Placeholder End/Checksum
  };

  RS485Serial.write(packet, sizeof(packet));
  RS485Serial.flush();
}

uint8_t fanModeCode(uint8_t zone) {
  if (zone == 1) {
    switch (zone1FanModeHigh) {
      case 0: return 0xD9; // Auto
      case 1: return 0x33; // High
      case 2: return 0xD9; // Low
    }
  } else if (zone == 2) {
    switch (zone2FanModeHigh) {
      case 0: return 0x99; // Auto
      case 1: return 0x33; // High
      case 2: return 0xB2; // Low
    }
  }
  return 0x99; // Default Auto
}
